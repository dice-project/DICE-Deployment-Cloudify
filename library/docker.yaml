# Docker
# ======
#
# Types and relationships that make it possible to create Docker hosts and run
# containers on them.


data_types:

  dice.datatypes.docker.RegistryAuth:
    description: Authentication data for docker registry
    properties:
      username: { required: false }
      password: { required: false }


node_types:

  dice.components.docker.Server:
    description: Docker instance that can host containers.
    derived_from: dice.chef.SoftwareComponent
    properties:
      create_runlist:
        default:
          - recipe[apt::default]
          - recipe[dice_common::default]
          - recipe[docker::default]
      configure_runlist:
        default:
          - recipe[docker::configure]
      start_runlist:
        default:
          - recipe[docker::start]
    attributes:
      address:
        description: >
          Address that can be passed to clients when connecting to docker
          server. Typically, this will be set to something like
          tcp://1.2.3.4:2375.

  dice.components.docker.Container:
    description: Docker container that should be run.
    derived_from: cloudify.nodes.Root
    properties:
      command:
        description: >
          Command that should be run in container. Note that command is a
          template that is expanded just before the container is started. All
          occurences of ``{attr_name}`` in this template will be replaced by
          the value of ``attr_name`` attribute.
        required: false
        default: null
      image:
        description: Name of the image that should be run.
        required: true
      tag:
        description: Image tag that should be run.
        required: true
      registry_auth:
        description: >
          Username and password for private registry. If image is from public
          registry, this property can be omitted.
        type: dice.datatypes.docker.RegistryAuth
        required: false
      port_mapping:
        description: >
          Map of container ports to host ports. If host port is set to
          ``null``, random port will be used for binding. Actual runtime
          mapping can be retrieved from ``port_mapping`` attribute. Typical
          examples of mapping would be ``80/tcp: 9876``, which will bind port
          80 from the container to host port 9876, and ``80/tcp: null``, which
          will bind container port 80 to random ephemeral port on host.
        required: false
        default: {}
      environment:
        description: >
          Map of environment variables and associated values that are passed
          to the container.
        required: false
        default: {}
      network:
        description: Network that container should be attached to.
        required: false
        default: null
      host:
        description: >
          Address of the docker host. If container is already connected to
          docker node, this property can be left out.
        required: false
        default: null
      monitoring:
        type: dice.types.MonitoringConfig
    attributes:
      id:
        description: Id of the container that has been created.
      name:
        description: Name of the container that has been created.
      port_mapping:
        description: >
          Instantiated port mapping. Any ports that were allowed to be mapped
          to random port in port_mapping property are in this mapping fixed to
          specific port.
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          # We execute container creation in configure because some attributes
          # get set in preconfigure stage of relationship lifecycle.
          implementation: dice.dice_plugin.tasks.docker.create
          executor: central_deployment_agent
          inputs:
            host:    { default: { get_attribute: [ SELF, host         ] } }
            command: { default: { get_property:  [ SELF, command      ] } }
            image:   { default: { get_property:  [ SELF, image        ] } }
            tag:     { default: { get_property:  [ SELF, tag          ] } }
            ports:   { default: { get_property:  [ SELF, port_mapping ] } }
            environ: { default: { get_property:  [ SELF, environment  ] } }
            network: { default: { get_attribute: [ SELF, network      ] } }
        start:
          implementation: dice.dice_plugin.tasks.docker.start
          executor: central_deployment_agent
          inputs:
            host:         { default: { get_attribute: [ SELF, host ] } }
            container_id: { default: { get_attribute: [ SELF, id   ] } }
        stop:
          implementation: dice.dice_plugin.tasks.docker.stop
          executor: central_deployment_agent
          inputs:
            host:         { default: { get_attribute: [ SELF, host ] } }
            container_id: { default: { get_attribute: [ SELF, id   ] } }
        delete:
          implementation: dice.dice_plugin.tasks.docker.delete
          executor: central_deployment_agent
          inputs:
            host:         { default: { get_attribute: [ SELF, host ] } }
            container_id: { default: { get_attribute: [ SELF, id   ] } }
    requirements:
      - dice.relationships.docker.HostedOn

  dice.components.docker.Network:
    description: Docker network.
    derived_from: cloudify.nodes.Root
    properties:
      name:
        description: Name of the network.
        required: true
      driver:
        description: Driver that should be used for new network.
        required: false
        default: bridge
      attachable:
        description: Create attachable network.
        required: false
        default: true
      host:
        description: >
          Address of the docker host. If network is already connected to
          docker node, this property can be left out.
        required: false
        default: null
    attributes:
      id:
        description: Id of the network that has been created.
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: dice.dice_plugin.tasks.docker.create_net
          executor: central_deployment_agent
          inputs:
            name:       { default: { get_property:  [ SELF, name       ] } }
            driver:     { default: { get_property:  [ SELF, driver     ] } }
            attachable: { default: { get_property:  [ SELF, attachable ] } }
            host:       { default: { get_attribute: [ SELF, host       ] } }
        delete:
          implementation: dice.dice_plugin.tasks.docker.delete_net
          executor: central_deployment_agent
          inputs:
            host:       { default: { get_attribute: [ SELF, host ] } }
            network_id: { default: { get_attribute: [ SELF, id   ] } }
    requirements:
      - dice.relationships.docker.HostedOn


  # Firewall rules for docker
  dice.firewall_rules.docker.Server:
    derived_from: dice.firewall_rules.Base
    description: >
      Firewall rules for basic docker setup. Note that this only opens ports
      for docker client-server communication, all other ports that containers
      might use need to be opened separately.
    properties:
      rules:
        default:
          - ip_prefix: 0.0.0.0/0
            protocol: tcp
            port: 2375


relationships:

  dice.relationships.docker.HostedOn:
    derived_from: cloudify.relationships.connected_to
    description: >
      Informs deployment services what docker instance will host current
      container. If this relationship is not set, container needs to have its
      host property set.
    source_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        preconfigure:
          implementation: dice.dice_plugin.tasks.base.set_attributes
          executor: central_deployment_agent
          inputs:
            host: { default: { get_attribute: [ TARGET, address ] } }

  dice.relationships.docker.AttachedToNetwork:
    derived_from: cloudify.relationships.connected_to
    description: >
      Informs deployment services which network should be used when creating
      container. If this relationship is not set, container will be attached
      to the default network.
    source_interfaces:
      cloudify.interfaces.relationship_lifecycle:
        preconfigure:
          implementation: dice.dice_plugin.tasks.base.set_attributes
          executor: central_deployment_agent
          inputs:
            network: { default: { get_attribute: [ TARGET, name ] } }
